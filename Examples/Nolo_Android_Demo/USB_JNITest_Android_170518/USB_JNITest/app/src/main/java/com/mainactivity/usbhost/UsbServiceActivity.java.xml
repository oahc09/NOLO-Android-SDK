package com.mainactivity.usbhost;

	import java.util.HashMap;
	import java.util.Iterator;

	import com.caliber.JNITest;
	import com.caliber.Nolo_ControllerStates;
	import com.caliber.Nolo_Pose;
	import com.caliber.Nolo_Vector3;
	import com.unity3d.player.UnityPlayer;
	import com.unity3d.player.UnityPlayerActivity;
	import com.watchdata.usbhostconn.UsbCustomTransfer;
	import com.watchdata.usbhostconn.HexSupport;
	import com.watchdata.usbhostconn.Utils;

	import android.app.Activity;
	import android.app.PendingIntent;
	import android.content.BroadcastReceiver;
	import android.content.Context;
	import android.content.Intent;
	import android.content.IntentFilter;
	import android.hardware.usb.UsbDevice;
	import android.hardware.usb.UsbManager;
	import android.os.Bundle;
	import android.os.Handler;
	import android.os.Message;
	import android.text.Editable;
	import android.util.Log;
	import android.view.Menu;
	import android.view.View;
	import android.widget.Button;
	import android.widget.EditText;
	import android.widget.TextView;
	import android.widget.Toast;

	public class UsbServiceActivity extends Activity {
	//public class UsbServiceActivity extends UnityPlayerActivity{
	private static final String TAG = UsbServiceActivity.class.getSimpleName();
	//	private static final String ACTION_USB_PERMISSION = "com.android.example.USB_PERMISSION";
	private static TextView usbdatatextView=null;
	private EditText senddataedittext=null;
	private Button openbutton,senddatabutton=null,cleardatabutton,closebutton,jnibutton;
	private static int num = 0;
	private Intent mintent = null;
	private static Context mcontext;
	private UsbCustomTransfer musbCustomTransfer;
	private int framenum = 0;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
	super.onCreate(savedInstanceState);

	setContentView(R.layout.activity_main);
	UI_Init();
	openbutton.setOnClickListener(new View.OnClickListener() {

	@Override
	public void onClick(View v) {
	// TODO Auto-generated method stub
	conn_usb();
	}
	});

	cleardatabutton.setOnClickListener(new View.OnClickListener() {
	@Override
	public void onClick(View v) {
	// TODO Auto-generated method stub
	usbdatatextView.setText("");
	}
	});
	mcontext = getApplicationContext();

	senddatabutton.setOnClickListener(new View.OnClickListener() {
	@Override
	public void onClick(View v) {
	/*				Editable mmeditable = senddataedittext.getText();
	String mmdataStr = mmeditable.toString() + "0A0D";
	if(mmdataStr.length() > 0){
	Log.i("UsbServiceActivity", mmdataStr);
	byte[] mmdata = HexSupport.toBytesFromHex(mmdataStr);
	sendData_usb(mmdata);
	}*/
	new Thread(new Runnable() {
	@Override
	public void run() {

	int mmStatus = JNITest.GetDeviceTrackingStatus(1);
	//获取设备版本号
	int mmVersion = JNITest.GetVersionByDeviceType(1);
	//获取电量
	int mmElectric = JNITest.GetElectricityByDeviceType(1);
	Nolo_Pose mmNolo_Pose = new Nolo_Pose();
	mmNolo_Pose = JNITest.GetPoseByDeviceType(1);
	Log.i("UsbServiceActivity", "rifcat Android 项目测试");
	}
	}).start();
	}
	});

	closebutton.setOnClickListener(new View.OnClickListener() {
	@Override
	public void onClick(View v) {
	// TODO Auto-generated method stub
	close_usb();
	}
	});

	jnibutton.setOnClickListener(new View.OnClickListener(){
	@Override
	public void onClick(View v){

	new Thread(new Runnable() {
	@Override
	public void run() {
	byte[] byts = {
	//								(byte)0xa5,(byte)0x33,(byte)0xB7,(byte)0x10,(byte)0xAE,(byte)0xFC,(byte)0x6B,(byte)0xB2,(byte)0xDF,(byte)0x53,(byte)0x9A,(byte)0x85,(byte)0xC3,(byte)0xAD,(byte)0x87,(byte)0x5A,(byte)0x43,(byte)0x24,(byte)0xA0,(byte)0x7B,(byte)0x3F,(byte)0xC2,(byte)0xAF,(byte)0xE8,(byte)0xB9,(byte)0xE6,(byte)0x5D,(byte)0xC1,(byte)0xC7,(byte)0x52,(byte)0x3A,(byte)0x97,(byte)0x9C,(byte)0xF2,(byte)0x58,(byte)0x61,(byte)0x5F,(byte)0x94,(byte)0x01,(byte)0x6A,(byte)0x1C,(byte)0x1D,(byte)0xC9,(byte)0xC0,(byte)0xE4,(byte)0x48,(byte)0x27,(byte)0xAF,(byte)0xC7,(byte)0xEC,(byte)0x40,(byte)0xD4,(byte)0x37,(byte)0xBC,(byte)0x2B,(byte)0x7C,(byte)0x83,(byte)0x3F,(byte)0x81,(byte)0x8D,(byte)0xF6,(byte)0xFF,(byte)0xFF,(byte)0x40
	(byte)0xa5,(byte)0x27,(byte)0x87,(byte)0xdd,(byte)0xaa,(byte)0x3f,(byte)0xb4,(byte)0x00,(byte)0xb8,(byte)0x9d,
	(byte)0x0c,(byte)0x12,(byte)0x69,(byte)0xfc,(byte)0x62,(byte)0x69,(byte)0x1f,(byte)0x0b,(byte)0x56,(byte)0xee,
	(byte)0xe3,(byte)0x43,(byte)0x6e,(byte)0x07,(byte)0x79,(byte)0x4d,(byte)0x51,(byte)0xa0,(byte)0x46,(byte)0x50,
	(byte)0xb6,(byte)0x44,(byte)0x0e,(byte)0xab,(byte)0xda,(byte)0xd1,(byte)0x92,(byte)0x00,(byte)0x63,(byte)0xf7,
	(byte)0xac,(byte)0x5a,(byte)0x34,(byte)0xeb,(byte)0xf7,(byte)0xa8,(byte)0xf9,(byte)0xec,(byte)0x62,(byte)0x0e,
	(byte)0xf1,(byte)0x88,(byte)0xe0,(byte)0x3b,(byte)0x1c,(byte)0x1e,(byte)0x30,(byte)0x87,(byte)0x33,(byte)0xc2,
	(byte)0x01,(byte)0xff,(byte)0xff,(byte)0x40
	};
	byte[] byts1 = {
	(byte)0xa6,(byte)0x15,(byte)0x6C,(byte)0xC6,(byte)0xFC,(byte)0x1D,(byte)0xE3,(byte)0x6D,(byte)0x25,(byte)0x04,(byte)0x32,(byte)0x34,(byte)0xF6,(byte)0xEE,(byte)0x4C,(byte)0xFA,(byte)0x69,(byte)0x69,(byte)0x57,(byte)0xB5,(byte)0x21,(byte)0xCC,(byte)0xF2,(byte)0x97,(byte)0x42,(byte)0x93,(byte)0xE0,(byte)0xE4,(byte)0x9E,(byte)0x44,(byte)0x20,(byte)0xDA,(byte)0xAA,(byte)0xB5,(byte)0x0A,(byte)0x46,(byte)0xEF,(byte)0x68,(byte)0xDD,(byte)0x66,(byte)0x8A,(byte)0xA9,(byte)0x71,(byte)0x8F,(byte)0x99,(byte)0x08,(byte)0x16,(byte)0xC6,(byte)0x89,(byte)0x68,(byte)0x81,(byte)0xE5,(byte)0x12,(byte)0x50,(byte)0xD9,(byte)0xD0,(byte)0x73,(byte)0x8D,(byte)0xE3,(byte)0x33,(byte)0xB3,(byte)0x00,(byte)0x00,(byte)0x00
	};
	String str1 = Utils.toHexFromBytes(byts).toLowerCase();
	String str2 = Utils.toHexFromBytes(byts1).toLowerCase();

	JNITest.sendStringDataToUnity(str1,str2);

	}
	}).start();

	}
	});
	JNITest.setHandler(mHandler);
	//		musbCustomTransfer = new UsbCustomTransfer(this,mHandler);
	musbCustomTransfer.usb_init();
	}

	public void UI_Init(){
	usbdatatextView=(TextView)findViewById(R.id.usbdata);
	openbutton = (Button)findViewById(R.id.openbutton);
	senddataedittext=(EditText)findViewById(R.id.senddataeditText);
	senddatabutton=(Button)findViewById(R.id.senddatabutton);
	cleardatabutton=(Button)findViewById(R.id.usbdataclear);
	closebutton = (Button)findViewById(R.id.closebutton);
	jnibutton = (Button)findViewById(R.id.jnibutton);

	}

	// 连接USB 设备
	public void conn_usb(){
	musbCustomTransfer.usb_conn();
	}

	// 关闭USB
	public void close_usb(){
	musbCustomTransfer.usb_finish();
	}

	// 通过USB 向设备发送数据
	public void sendData_usb(byte[] mdata){
	musbCustomTransfer.usb_sendData(mdata);
	}


	private  Handler mHandler = new Handler() {
	public void handleMessage (Message msg) {//此方法在ui线程运行

	switch(msg.what){
	case 1:
	num++;
	String numStr = Integer.toString(num, 10);
	int len = msg.arg1;
	String str = HexSupport.toHexFromBytes((byte[])msg.obj) ;
	Toast.makeText(mcontext,"收到数据", Toast.LENGTH_SHORT).show();
	usbdatatextView.setText(usbdatatextView.getText() + "\n" + numStr + ":" + str);
	// 接收USB 数据
	//       		UnityPlayer.UnitySendMessage("USB Host Peripherals","read",str);
	break;
	case 2:
	//        		usbdatatextView.setText(mystring);
	break;
	case 3:
	usbdatatextView.setText("");
	usbdatatextView.setText("USB 设备断开");
	//        		UnityPlayer.UnitySendMessage("USB Host Peripherals","usb 设备断开","");
	break;
	default:
	break;
	}
	}
	};
	}
